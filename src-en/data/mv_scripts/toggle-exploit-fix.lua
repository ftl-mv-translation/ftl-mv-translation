local vter = mods.multiverse.vter

local toggleEvent = false
local removedDroneTimer = nil
local droneTimers = {}
local lastDroneTimers = {}
local lastLastDroneTimers = {}

script.on_internal_event(Defines.InternalEvents.SHIP_LOOP, function(ship)
    if not ship.iShipId == 0 then return end

    -- Keep timer tables up to date
    lastLastDroneTimers = lastDroneTimers
    lastDroneTimers = droneTimers
    droneTimers = {}
    if Hyperspace.ships.player and Hyperspace.ships.player:HasSystem(4) then
        for drone in vter(Hyperspace.ships.player.droneSystem.drones) do
            droneTimers[drone.selfId] = drone.destroyedTimer
        end
    end

    -- Find the new drone and apply the old timer to it
    if toggleEvent then
        toggleEvent = false
        local newDrone = nil
        for droneId, _ in pairs(droneTimers) do
            if not lastDroneTimers[droneId] then
                newDrone = droneId
                break
            end
        end
        if newDrone then
            if Hyperspace.ships.player:HasSystem(4) then
                for drone in vter(Hyperspace.ships.player.droneSystem.drones) do
                    if drone.selfId == newDrone then
                        drone.destroyedTimer = removedDroneTimer
                    end
                end
            end
        end
        removedDroneTimer = nil
    end
end)

script.on_game_event("COMBAT_CHECK_TOGGLE_LOAD", false, function() 
    -- Get the timer from the old drone when removed
    for droneId, deathTimer in pairs(lastLastDroneTimers) do
        if not droneTimers[droneId] then
            removedDroneTimer = deathTimer
        end
    end
    if removedDroneTimer then
        toggleEvent = true
    end
end)
